
// Buttons
// -------------------

// Overrides: atom/atom/static/buttons.less


.btn {
  .box-shadow(2px, @button-border-color);
  height: @button-height;
  color: @button-text-color;
  background-color: @button-background-color;
  border: 1px solid @button-border-color;
  transition-property: background-color, border-color, color, box-shadow;
  transition-duration: 0.15s;

  &:hover:not(.disabled),
  &:focus:not(.disabled) {
    color: @text-color-highlight;
    background-color: @button-background-color-hover;
    border-color: @button-border-color-hover;
    .box-shadow(2px, @button-border-color-hover);
  }

  &:active:not(.disabled) {
    .box-shadow(1px);
    color: @button-text-color;
    transform: translate(1px, 1px);
    background-color: @button-background-color-hover;
  }

  &.selected:not(.disabled) {
    color: @text-color-highlight;
    background-color: @button-background-color-selected;
    border-color: @button-border-color-hover;
    .box-shadow(2px, @button-border-color-hover);

    &:hover {
      background-color: @text-color-selected;
      color: @text-color-highlight;
    }
  }
  &:focus,
  &:focus:active {
    outline: none;
  }

  &.disabled {
    color: fade(@text-color, 70%);
    .box-shadow(2px, fade(@button-border-color, 50%));
    .pinstripe(
      rgba(0, 0, 0, 0.06),
      rgba(0, 0, 0, 0)
    );
  }
}


// Colored buttons -----------------------

.btn.btn-primary {
  .btn-color(
    darken(@background-color-info, 2%)
  );
}

.btn.btn-info {
  .btn-color(
    darken(@background-color-info, 2%)
  );
}

.btn.btn-success {
  .btn-color(
    darken(@background-color-success, 2%)
  );
}

.btn.btn-warning {
  .btn-color(
    darken(@background-color-warning, 2%)
  );
}

.btn.btn-error {
  .btn-color(
    darken(@background-color-error, 2%)
  );
}

.btn-color(@bg) {
  @bs: fade( darken(@bg, 30%), 80%);
  @bsh: lighten(@bs, 10%);

  .box-shadow(2px, @bs);
  color: @text-color-selected;
  background-color: @bg;
  border-color: @bs;

  &:hover,
  &:focus {
    background-color: lighten(@bg, 3%);
    color: @text-color-selected;
    border-color: @bsh;
    .box-shadow(2px, @bsh);
  }

  &:active {
    .box-shadow(1px, @bsh);
  }

  &.selected,
  &.selected:not(.disabled) {
    background-color: lighten(@bg, 6%);
    color: darken(@text-color-selected, 3%);
  }

  &.selected:focus,
  &.selected:hover {
    background-color: lighten(@bg, 9%);
    color: @text-color-selected;
  }
}


// Button Group -----------------------

.btn-group {
  .box-shadow(2px, @button-border-color);
  border: 1px solid @button-border-color;
  border-left-width: 1px;
  border-radius: @component-border-radius + 1px;

  &:hover,
  &:focus {
    .box-shadow(2px, @button-border-color-hover);
  }

}

.btn-group > .btn {
  .box-shadow(0);
  border-color: @button-border-color;
  border-color: transparent;
  border-width: 0;
  border-radius: 0;

  // We want the first and last buttons in the group to be styled differently
  // from the rest. But sometimes an Atom package will hide a button instead of
  // removing it, so we can't assume that the first button we _see_ is truly
  // the first button. This is how we get around that.

  // Style all visible buttons.
  &:not([style*='none']) {
    border-top-left-radius:    @component-border-radius !important;
    border-bottom-left-radius: @component-border-radius !important;
    border-left-width: 0;
    border-left-color:  transparent;
    border-right-color: transparent;
  }

  // Style all visible buttons except for the first.
  &:not([style*='none']) ~ .btn:not([style*='none']) {
    border-top-left-radius:    0 !important;
    border-bottom-left-radius: 0 !important;
    // Simulate a border-left here because that's how much of a pain it is to
    // do an actual border.
    background-image: linear-gradient(
      to right,
      @button-border-color,
      @button-border-color 1px,
      rgba(0, 0, 0, 0) 2px;
    );
  }

  &:active:not(.disabled) {
    transform: translate(1px, 1px);
  }

  // The button-inside-a-button whose only purpose is to put a status color on
  // the right side of a button. The package list does this.
  & > .status-indicator {
    width: 1px !important;
    border-right-width: 5px !important;
  }

  & + .btn {
    margin-left: 0;
  }

  &.disabled {
    .box-shadow(2px, fade(@button-border-color, 10%));
  }

  &.selected {
    .box-shadow(0);
    border-right-width: 0;
  }
}

.btn-xs,
.btn-group-xs > .btn {
  font-size: @font-size - 2px;
  padding: 3px 5px;
  height: auto;
  line-height: 100%;
}

.btn-sm,
.btn-group-sm > .btn {
  font-size: @font-size - 1px;
  padding: 3px 7px;
  height: auto;
}

.btn-lg,
.btn-group-lg > .btn {
  font-size: @font-size + 4px;
  height: auto;
  padding: 3px 8px;
}

.config-menu .btn {
  font-size: 12px;
  border: 1px solid hsla(0, 0%, 0%, .2);
  background-color: hsla(0, 0%, 0%, .05);
}

*:not(atom-editor[mini]) {
  ::-webkit-input-placeholder,
  .placeholder-text {
    color: fade(@text-color, 45%) !important;
  }
}

select.input-select {
  background-color: @input-background-color;
}

@keyframes btn-installing {
  0% {
    background-position: 0px 0px;
  }

  100% {
    background-position: -20px 0px;
  }
}

.settings-view .package-card .meta-controls {
  .btn.is-uninstalling {
    animation: 1s linear infinite btn-installing;
    background-image: repeating-linear-gradient(
      -45deg,
      darken(@button-background-color, 5%) 0px,
      darken(@button-background-color, 5%) 3px,
      @button-background-color 4px,
      @button-background-color 8px
    );
  }

  .btn.is-installing {
    animation: 1s linear infinite btn-installing;
    background-image: repeating-linear-gradient(
      -45deg,
      darken(@background-color-info, 5%) 0px,
      darken(@background-color-info, 5%) 3px,
      @background-color-info 4px,
      @background-color-info 8px
    );
  }
}

// The icons inside buttons need a slight downward nudge to line up.
.btn.icon::before {
  top: 1px;
}
